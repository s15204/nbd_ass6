1)
MATCH (town1 {name:"Darjeeling"}),(town2 {name:"Sandakphu"}), path=allShortestPaths((town1)-[*]-(town2)) RETURN path

2) 
MATCH (town1 {name:"Darjeeling"}),(town2 {name:"Sandakphu"}), path=allShortestPaths((town1)-[relation*]-(town2))
WHERE ALL(x IN relation WHERE x.winter="true")
RETURN path

3)
MATCH (town1 {name:"Darjeeling"}),(town2 {name:"Sandakphu"}), path = allShortestPaths((town1)-[*]-(town2)) RETURN path ORDER BY length(path) ASC

4)
MATCH (airport:Airport)<-[:ORIGIN]-(flight:Flight) RETURN airport, COUNT(flight) ORDER BY COUNT(flight)

9)	
MATCH p=(start:Airport)<-[:ORIGIN]-(f:Flight)-[:DESTINATION]->(end:Airport)
    RETURN start, count(distinct end)

=== UNTESTED BELOW === Probably not functional ===

5)

6)
MATCH (start:Airport { name:"LAX" }), (end: Airport {name:'DAY'}), trip = (start)-[:CONNECTION*]->(end) WITH trip, relationships(trip) AS conn
	RETURN trip, REDUCE(price = 0, conn IN conn | price + conn.price) AS price ORDER BY price

7)
MATCH p = (n:Airport {name: "LAX"})<-[:ORIGIN]-(:Flight)-[*..6]-(:Flight)-[:DESTINATION]->(m:Airport {name: "DAY"})
RETURN p, reduce(
    c = 0, 
    flight IN [n IN nodes(p) WHERE 'Flight' IN labels(n)] | c + [(flight)<-[:ASSIGN]-(ticket:Ticket {class: "economy"}) | ticket.price][0]
) as cost ORDER BY cost ASC LIMIT 1

8) 
MATCH p = (n:Airport {name: "LAX"})<-[:ORIGIN]-(:Flight)-[*..6]-(:Flight)-[:DESTINATION]->(m:Airport {name: "DAY"})
RETURN p, reduce(
    c = 0, 
    flight IN [n IN nodes(p) WHERE 'Flight' IN labels(n)] | c + [(flight)<-[:ASSIGN]-(ticket:Ticket {class: "business"}) | ticket.price][0]
) as cost ORDER BY cost ASC LIMIT 1

10)